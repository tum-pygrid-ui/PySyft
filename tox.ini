[tox]
envlist =
    lint
    syft.jupyter
    syft.publish
    syft.test.fast
    syft.test.security
    stack.test.integration
    stack.test.integration.k8s
    stack.test.integration.smpc
    grid.test.backend
requires =
    tox-pyenv
    tox-run-command
    pip >= 21.2.1
skipsdist = True


[testenv]
basepython = python3
deps = pip
commands =
    python --version

[testenv:lint]
; setupdir = {toxinidir}
; changedir = {toxinidir}
description = Linting
allowlist_externals =
    bash
deps =
    black[python2]
    isort
    protoc-wheel-0
    pre-commit
commands =
    bash -c "cd {toxinidir}/packages/syft; ./scripts/build_proto.sh"
    black .
    isort .
    pre-commit run --all-files


# Syft
[testenv:syft]
deps =
    -e{toxinidir}/packages/syft[dev]
changedir = {toxinidir}/packages/syft
description = Syft
commands =
    pip list

[testenv:syft.publish]
changedir = {toxinidir}/packages/syft
description = Build and Publish Syft Wheel
commands =
    python -m pip install --upgrade pip
    pip install --upgrade setuptools wheel twine tox build
    python -c 'from shutil import rmtree; rmtree("build", True); rmtree("dist", True)'
    python -m build .

[testenv:syft.jupyter]
description = Jupyter Notebook with Editable Syft
deps =
    {[testenv:syft]deps}
    jupyter
commands =
    pip install prompt-toolkit jupyter jupyterlab --upgrade # overrides grid deps in setup.cfg which break jupyter
    jupyter lab --ip 0.0.0.0

[testenv:syft.test.fast]
description = Syft Unit Tests Fast
deps =
    {[testenv:syft]deps}
changedir = {toxinidir}/packages/syft
commands =
    pip list
    pytest -m fast -n auto

[testenv:syft.test.security]
description = Security Checks for Syft
changedir = {toxinidir}/packages/syft
deps =
    {[testenv:syft]deps}
commands =
    pip install --upgrade pip
    bandit -r src
    safety check

[testenv:stack.test.integration]
description = Integration Tests for Core Stack
deps =
    {[testenv:syft]deps}
changedir = {toxinidir}
allowlist_externals =
    docker
    grep
    sleep
    bash
commands =
    pip install -e packages/hagrid
    docker --version
    docker compose version
    bash -c "docker volume rm test_domain_1_app-db-data --force || true"
    bash -c "docker volume rm test_domain_2_app-db-data --force || true"
    bash -c "docker volume rm test_network_1_app-db-data --force || true"
    bash -c "docker volume rm test_domain_1_tailscale-data --force || true"
    bash -c "docker volume rm test_domain_2_tailscale-data --force || true"
    bash -c "docker volume rm test_network_1_tailscale-data --force || true"
    bash -c "docker volume rm test_network_1_headscale-data --force || true"
    bash -c 'HAGRID_ART=false hagrid launch test_network_1 network to docker:9081 --tail=false'
    bash -c 'HAGRID_ART=false hagrid launch test_domain_1 domain to docker:9082 --tail=false'
    bash -c 'HAGRID_ART=false hagrid launch test_domain_2 domain to docker:9083 --tail=false'
    docker ps
    bash -c '(docker logs test_domain_1-frontend-1 -f &) | grep -q "event - compiled successfully" || true'
    bash -c '(docker logs test_network_1-frontend-1 -f &) | grep -q "event - compiled successfully" || true'
    bash -c '(docker logs test_domain_1-backend_stream-1 -f &) | grep -q "Application startup complete" || true'
    bash -c '(docker logs test_domain_2-backend_stream-1 -f &) | grep -q "Application startup complete" || true'
    bash -c '(docker logs test_network_1-backend_stream-1 -f &) | grep -q "Application startup complete" || true'

    sleep 5
    ; connect each stack to the VPN
    pytest tests/vpn_connect -p no:randomly
    pytest tests/association_requests -p no:randomly
    pytest tests/integration -vvvv -k "not k8s" --ignore=tests/integration/smpc -p no:randomly
    bash -c 'HAGRID_ART=false hagrid land test_network_1'
    bash -c 'HAGRID_ART=false hagrid land test_domain_1'
    bash -c 'HAGRID_ART=false hagrid land test_domain_2'

[testenv:stack.test.integration.smpc]
description = Integration Tests for Core Stack
deps =
    {[testenv:syft]deps}
changedir = {toxinidir}
allowlist_externals =
    docker
    grep
    sleep
    bash
commands =
    pip install -e packages/hagrid
    docker --version
    docker compose version
    bash -c "docker volume rm test_domain_1_app-db-data --force || true"
    bash -c "docker volume rm test_domain_2_app-db-data --force || true"
    bash -c "docker volume rm test_domain_3_app-db-data --force || true"
    bash -c "docker volume rm test_domain_1_tailscale-data --force || true"
    bash -c "docker volume rm test_domain_2_tailscale-data --force || true"
    bash -c "docker volume rm test_domain_3_tailscale-data --force || true"
    bash -c 'HAGRID_ART=false hagrid launch test_domain_1 domain to docker:9082 --tail=false'
    bash -c 'HAGRID_ART=false hagrid launch test_domain_2 domain to docker:9083 --tail=false'
    bash -c 'HAGRID_ART=false hagrid launch test_domain_3 domain to docker:9084 --tail=false'

    docker ps
    bash -c '(docker logs test_domain_1-backend_stream-1 -f &) | grep -q "Application startup complete" || true'
    bash -c '(docker logs test_domain_2-backend_stream-1 -f &) | grep -q "Application startup complete" || true'
    bash -c '(docker logs test_domain_3-backend_stream-1 -f &) | grep -q "Application startup complete" || true'


    sleep 5
    ; perform spmc test

    pytest tests/integration/smpc -vvvv -p no:randomly
    bash -c 'HAGRID_ART=false hagrid land test_domain_1'
    bash -c 'HAGRID_ART=false hagrid land test_domain_2'
    bash -c 'HAGRID_ART=false hagrid land test_domain_3'

[testenv:stack.test.integration.k8s]
description = Integration Tests for Core Stack
deps =
    {[testenv:syft]deps}
changedir = {toxinidir}
passenv=HOME
allowlist_externals =
    devspace
    kubectl
    minikube
    grep
    sleep
    bash
    kubectx
commands =
    minikube version
    bash -c 'minikube status && echo "minikube running" || echo "minikube starting" && minikube start --disk-size=40g'
    minikube addons enable ingress
    devspace --version
    bash -c 'kubectl create namespace openmined || true'
    devspace use namespace openmined
    bash -c 'cd packages/grid && devspace deploy -b -p domain'
    bash -c 'while ! (kubectl get ingress &) | grep -Eq "stack-ingress.*[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}"; do echo "waiting for ingress" && sleep 1; done'
    bash -c 'TEST_DOMAIN_IP=`minikube ip` TEST_DOMAIN_PORT=80 pytest tests/integration/k8s_test.py -vvvv -p no:randomly'

[testenv:grid.test.backend]
description = Tests for Grid Backend
deps =
    {[testenv:syft]deps}
    pytest
    pytest-xdist[psutil]
    poetry
    importlib-metadata
changedir = {toxinidir}/packages/grid/backend
allowlist_externals =
    bash
commands =
    python --version
    pip install -r requirements.txt
    pip install importlib-metadata colorama # poetry is messing this up?
    bash -c 'SQLALCHEMY_DATABASE_URI="sqlite:///file:test_db?mode=memory&cache=shared&uri=true" LOGURU_SINK="./grid.log" pytest grid/tests'

[flake8]
ignore =
    W503
max-line-length = 120
exclude =
    .tox

[mypy]
python_version = 3.9
